' {$STAMP BS2p}
' {$PBASIC 2.5}

MotR        CON        8           'Serial out pin for right motor
MotL        CON        9           'Serial out pin for left motor
Bmode       CON        16385       'Constant for 115,200 baud, 8 bit, no parity, inverted
DriveDelay  CON        6           'Delay to scale start routine times
IRPause     CON        2           'Pause between reading sensor pins
Reaction    CON        15          'smoothing value added to all turning commands.
                                   'the smaller (or more negative) a value, the harder thr robot will turn
IR_FRONT_LEFT   CON      10725
IR_FRONT_MLEFT  CON      10615
IR_FRONT_MIDDLE CON      10812
IR_FRONT_MRIGHT CON      10303
IR_FRONT_RIGHT  CON      10407

IR_BACK_LEFT    CON      10725
IR_BACK_MLEFT   CON      17610
IR_BACK_MIDDLE  CON      10812
IR_BACK_MRIGHT  CON      10303
IR_BACK_RIGHT   CON      10407

' --------------Variables------------------------
'
Pattern     VAR        Byte        'The Start pattern to be run
SearchBit   VAR        Bit         'Start pattern search bit - 0 if search to the left, 1 if search to the right
SideBit     VAR        Byte         'Side that opponent was last seen on (0 if front, 1 if back
IRoutFront  VAR        Byte        'Front Sensor output to Branch
IRoutBack   VAR        Byte        'Back Sensor output to Branch
NewSpdRt    VAR        Byte        'Right motor speed 0 is full reverse, 255 is full forward, 127 and 128 are off
NewSpdLeft  VAR        Byte        'Left motor speed 0 is full reverse, 255 is full forward, 127 and 128 are off
Delay       VAR        Byte        'Counter

HitCount_F  VAR        Byte        'Hit Counter for Front Sensors
HitCount_B  VAR        Byte        'Hit Counter for Back Sensors

HitMax      CON        8           'Number of hits recived on opposite side before direction will be changed

irPulse     VAR        Word        'Stores pulse widths
remoteCode  VAR        Byte        'Stores remote code
P7bwrk      VAR        Word        'Workspace for selection pushbuttons (pin 7)
P4bwrk      VAR        Word        'Workspace for selection pushbuttons (pin 6)
Time        VAR        Word        'Button push time accumulator

StartCount  VAR        Word        'Time since Routine began

' --------------Initializations------------------
'
MAINIO
'turn off IR LEDS
LOW 1
LOW 2
LOW 3
LOW 4
LOW 5

LOW 10
LOW 11
LOW 12
LOW 13
LOW 14

AUXIO
INPUT 0
INPUT 1
INPUT 2
INPUT 3

'initialize variables
NewSpdRt = 127
NewSpdLeft = 127
Pattern = 0
Delay = 0
IRoutFront = 0
IRoutBack = 0

'LEDs
Blue_LED       CON 11
Red_LED        CON 12
Green_LED      CON 10

'**************************************************************************
'**************************************************************************
'**************************************************************************
'***************Main Program***********************************************

'uncomment to test start routines
'DO
'GOSUB Redlight
'LOOP

Main:
GOSUB Sensors
GOSUB Branching
GOSUB Drive
GOSUB Kill
'PAUSE 10
GOTO Main


'**************************************************************************
'**************************************************************************
'*********Motor Control****************************************************

Drive:
'uncomment if Display routine is removed
'PAUSE DriveDelay

'Displays debug information on Serial LCD
AUXIO
SEROUT 15,2,[27,115]
SEROUT 15,2,[27,76,0,0,"Rt:   ",DEC NewSpdRt,   "   "]
SEROUT 15,2,[27,76,0,1,"Left: ",DEC NewSpdLeft, "   "]

SEROUT 15,2,[27,76,10,0,"Side:   ", BIN1 SideBit]
SEROUT 15,2,[27,76,10,1,"Search: ", BIN1 SearchBit]

SEROUT 15,2,[27,76,0,2,"IRFront: ",BIN5 IROutFront]
SEROUT 15,2,[27,76,0,3,"IRBack:  ",BIN5 IROutBack]

SEROUT 15,2,[27,76,16,2,"F ",DEC HitCount_F]
SEROUT 15,2,[27,76,16,3,"B ",DEC HitCount_B]

MAINIO
SEROUT MotR, Bmode, ["!G ",SDEC ((NewSpdRt-127)<<3),CR]
SEROUT MotL, Bmode, ["!G ",SDEC ((127-NewSpdLeft)<<3),CR]

RETURN


'**************************************************************************
'**************************************************************************
'*************Check Sensors************************************************

Sensors:
MAINIO

'Front Plow Sensors
IROutFront = 0

LOW 1
LOW 2
LOW 3
LOW 4
LOW 5

FREQOUT 1, 2, IR_FRONT_RIGHT   'Right Front IR sensor
IROutFront.BIT4 = IN6
LOW 1
PAUSE IRPause
FREQOUT 2, 2, IR_FRONT_MRIGHT   'Right Center Front IR sensor
IROutFront.BIT3 = IN6
LOW 2
PAUSE IRPause
FREQOUT 3, 2, IR_FRONT_MIDDLE   'Center Front IR sensor
IROutFront.BIT2 = IN6
LOW 3
PAUSE IRPause
FREQOUT 4, 2, IR_FRONT_MRIGHT   'Left Center Front IR sensor
IROutFront.BIT1 = IN6
LOW 4
PAUSE IRPause
FREQOUT 5, 2, IR_FRONT_LEFT   'Left Front IR sensor
IROutFront.BIT0 = IN6
LOW 5
PAUSE IRPause

'Back Plow Sensors
IROutBack = 0

LOW 10
LOW 11
LOW 12
LOW 13
LOW 14

FREQOUT 10, 2, IR_BACK_RIGHT   'Right Back IR sensor
IROutBack.BIT4 = IN15
LOW 10
PAUSE IRPause
FREQOUT 11, 2, IR_BACK_MRIGHT   'Right Center Back IR sensor
IROutBack.BIT3 = IN15
LOW 11
PAUSE IRPause
FREQOUT 12, 2, IR_BACK_MIDDLE   'Center Back IR sensor
IROutBack.BIT2 = IN15
LOW 12
PAUSE IRPause
FREQOUT 13, 2, IR_BACK_MLEFT   'Left Center Back IR sensor
IROutBack.BIT1 = IN15
LOW 13
PAUSE IRPause
FREQOUT 14, 2, IR_BACK_LEFT   'Left Back IR sensor
IROutBack.BIT0 = IN15
LOW 14
PAUSE IRPause

'Uncomment for debugging purposes, will blind the sensors
'IRoutFront = 31
'IRoutBack = 31

RETURN


'**************************************************************************
'**************************************************************************
'***************Branching**************************************************

Branching:
'detect which side has more hits

'if Side = Front
IF (SideBit = 0) THEN
 'if there are hits on the opposite plow alone, increase hit counter
 IF (IRoutFront = 31) AND (IRoutBack < 31) THEN
   HitCount_F = 0
   HitCount_B = HitCount_B + 1
 ELSE
   'Otherwise, zero the counters
   HitCount_F = 0
   HitCount_B = 0
 ENDIF
ENDIF

'if Side = Back
IF (SideBit = 1) THEN
 'if there are hits on the opposite plow alone, increase hit counter
 IF (IRoutBack = 31) AND (IRoutFront < 31) THEN
   HitCount_B = 0
   HitCount_F = HitCount_F + 1
 ELSE
   'Otherwise, zero the counters
   HitCount_B = 0
   HitCount_F = 0
 ENDIF
ENDIF

'if Hitcount exceeds maximum, change directions
IF (HitCount_F > HitMax) THEN
 SearchBit = SearchBit ^ 1 'make sure to change search direction
 SideBit=0
 HitCount_B = 0
 HitCount_F = 0
 'Write new direction bit to EEPROM, at address #0
 WRITE 0, SideBit

ENDIF

'if Hitcount exceeds maximum, change directions
IF (HitCount_B > HitMax) THEN
 SearchBit = SearchBit ^ 1 'make sure to change search direction
 SideBit=1
 HitCount_B = 0
 HitCount_F = 0

 'Write new direction bit to EEPROM, at address #0
 WRITE 0, SideBit
ENDIF


IF (SideBit = 0) THEN GOSUB BranchingFront
IF (SideBit = 1) THEN GOSUB BranchingBack

RETURN



'************Front Branching Routine***************************************
BranchingFront:
BRANCH IRoutFront, [F_Straight,F_EasyLeft,F_Left, F_Left, F_Straight,F_HardLeft,F_HardLeft,F_HardLeft,F_Right,F_EasyRight,F_Search,F_SearchLeft,F_HardRight,F_Search,F_Search,F_SlowLeft,F_EasyRight,F_Straight,F_EasyLeft,F_EasyLeft,F_HardRight,F_Search,F_Search,F_Left, F_Right,F_EasyRight,F_SearchRight,F_StraightR,F_HardRight,F_Right,F_SlowRight,F_Search]
'0 = hit            00000      00001      00010   00011   00100      00101       00110     00111      01000   01001       01010    01011        01100       01101    01110    01111      10000       10001      10010      10011      10100       10101    10110    10111   11000   11001       11010         11011       11100       11101   11110       11111

'************Back Branching Routine****************************************
BranchingBack:
BRANCH IRoutBack, [B_Straight,B_EasyLeft,B_Left, B_Left, B_Straight,B_HardLeft,B_HardLeft,B_HardLeft,B_Right,B_EasyRight,B_Search,B_SearchLeft,B_HardRight,B_Search,B_Search,B_SlowLeft,B_EasyRight,B_Straight,B_EasyLeft,B_EasyLeft,B_HardRight,B_Search,B_Search,B_Left, B_Right,B_EasyRight,B_SearchRight,B_StraightR,B_HardRight,B_Right,B_SlowRight,B_Search]
'0 = hit           00000      00001      00010   00011   00100      00101      00110      00111      01000   01001       01010    01011        01100       01101    01110    01111      10000       10001      10010      10011      10100       10101    10110    10111   11000   11001       11010         11011       11100       11101   11110       11111



'************Motor Routines************************************************
F_StraightR:        '****************Straight, change search direction
'SearchBit = SearchBit ^ 1
GOTO F_Straight


F_SearchRight:      '****************Search to right
SearchBit = 1
GOTO F_Search


F_SearchLeft:       '****************Search to left
SearchBit = 0
GOTO F_Search


F_Search:           '****************Search to right if SearchBit = 1, Search to left if SearchBit = 0
NewSpdLeft  = 150+(SearchBit*50)
NewSpdRt = 200-(SearchBit*50)
RETURN


F_Straight:         '****************Straight****************
NewSpdLeft = 255
NewSpdRt = 255
RETURN


F_HardRight:        '****************Hard right****************
SearchBit = 1
NewSpdLeft  = 255
NewSpdRt = 135 + Reaction
RETURN


F_HardLeft:         '****************Hard left****************
SearchBit = 0
NewSpdLeft  = 135 + Reaction
NewSpdRt = 255
RETURN


F_Right:            '****************Right****************
SearchBit = 1
NewSpdLeft  = 255
NewSpdRt = 160 + Reaction
RETURN


F_Left:             '****************Left****************
SearchBit = 0
NewSpdLeft  = 160 + Reaction
NewSpdRt = 255
RETURN


F_EasyRight:        '****************Easy right****************
SearchBit = 1
NewSpdLeft  = 255
NewSpdRt = 185 + Reaction
RETURN


F_EasyLeft:         '****************Easy left****************
SearchBit = 0
NewSpdLeft  = 185 + Reaction
NewSpdRt = 255
RETURN


F_SlowRight:        '****************Slow right****************
SearchBit = 1
NewSpdLeft  = 255
NewSpdRt = 100 + Reaction
RETURN


F_SlowLeft:         '****************Slow left****************
SearchBit = 0
NewSpdLeft  = 100 + Reaction
NewSpdRt = 255
RETURN

'***************************Backward Motor Routines************

B_StraightR:        '****************Straight, change search direction
SearchBit = SearchBit ^ 1
GOTO B_Straight


B_SearchRight:      '****************Search to right
SearchBit = 1
GOTO B_Search


B_SearchLeft:       '****************Search to left
SearchBit = 0
GOTO B_Search

'FIXME!!! TURNS WAY TO WIDE
B_Search:           '****************Search to right if SearchBit = 1, Search to left if SearchBit = 0
NewSpdLeft  = 55+(SearchBit*50)
NewSpdRt = 105-(SearchBit*50)
RETURN


B_Straight:         '****************Straight****************
NewSpdLeft = 0
NewSpdRt = 0
RETURN


B_HardRight:        '****************Hard right****************
SearchBit = 1
NewSpdLeft  = 120 - Reaction
NewSpdRt = 0
RETURN


B_HardLeft:         '****************Hard left****************
SearchBit = 0
NewSpdLeft  = 0
NewSpdRt = 120 - Reaction
RETURN


B_Right:            '****************Right****************
SearchBit = 1
NewSpdLeft  = 95 - Reaction
NewSpdRt = 0
RETURN


B_Left:             '****************Left****************
SearchBit = 0
NewSpdLeft  = 0
NewSpdRt = 95 - Reaction
RETURN


B_EasyRight:        '****************Easy right****************
SearchBit = 1
NewSpdLeft  = 70 - Reaction
NewSpdRt = 0
RETURN


B_EasyLeft:         '****************Easy left****************
SearchBit = 0
NewSpdLeft  = 0
NewSpdRt = 70 - Reaction
RETURN


B_SlowRight:        '****************Slow right****************
SearchBit = 1
NewSpdLeft  = 155 - Reaction
NewSpdRt = 0
RETURN


B_SlowLeft:         '****************Slow left****************
SearchBit = 0
NewSpdLeft  = 0
NewSpdRt = 155 - Reaction
RETURN

'**************************************************************
'*****************************Kill*****************************
'**************************************************************

Kill:
       AUXIO
       IF (IN0 = 1) THEN GOTO Redlight
       IF (IN1 = 1) THEN GOTO Redlight
       IF (IN2 = 1) THEN GOTO Redlight
       IF (IN3 = 1) THEN GOTO Redlight


       IF IN14 = 0 THEN
        PAUSE 20
        IF IN14 = 0 THEN
          GOTO Redlight
        ENDIF
       ENDIF

       RETURN

Redlight:
          GOSUB Green

          GOSUB Sensors

          MAINIO
          SEROUT MotR, Bmode, ["!G ",SDEC ((0)<<3),CR]
          SEROUT MotL, Bmode, ["!G ",SDEC ((0)<<3),CR]

          AUXIO

          SEROUT 15,2,[27,115]
          SEROUT 15,2,[27,76,0,0,"     DEAD DEAD     "]
          SEROUT 15,2,[27,76,0,1,"       ", BIN5 IROutFront, "        "]
          SEROUT 15,2,[27,76,0,2,"       ", BIN5 IROutBack,  "        "]
          SEROUT 15,2,[27,76,0,3,"                    "]
          LOW 14
          PAUSE 100
          GOTO redlight

Green:
  AUXIO
  HIGH Green_LED
  LOW Red_LED
  LOW Blue_LED
RETURN

Red:
  AUXIO
  LOW Green_LED
  HIGH Red_LED
  LOW Blue_LED
RETURN

Blue:
  AUXIO
  LOW Green_LED
  LOW Red_LED
  HIGH Blue_LED
RETURN

LEDs_Off:
  AUXIO
  LOW Green_LED
  LOW Red_LED
  LOW Blue_LED
RETURN